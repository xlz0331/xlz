package com.hwagain.org.register.web;

import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import com.hwagain.framework.core.dto.PageVO;
import com.hwagain.framework.core.response.Response;
import com.hwagain.framework.core.response.SuccessResponse;
import com.hwagain.framework.core.response.SuccessResponseData;
import com.hwagain.framework.validation.util.ValidationUtil;
import com.hwagain.framework.web.common.controller.BaseController;
import com.hwagain.org.register.dto.RegPeopleDto;
import com.hwagain.org.register.service.IRegPeopleService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * <p>
 *  入职注册-注册登记 前端控制器
 * </p>
 *
 * @author guoym
 * @since 2018-06-07
 */
@RestController
@RequestMapping(value="/register/regPeople",method={RequestMethod.GET,RequestMethod.POST})
@Api(value="入职注册-注册登记",description="入职注册-注册登记")
public class RegPeopleController extends BaseController{
	
	@Autowired
	IRegPeopleService regPeopleService;
	
	/**
	 * 查询全部数据
	 * 
	 * @return
	 */
	@RequestMapping("/findAll")
	@ApiOperation(value = "查詢数据列表", notes = "查詢数据列表",httpMethod="GET")
	public Response findAll(){
		return SuccessResponseData.newInstance(regPeopleService.findAll(),null,this.getValidation(new RegPeopleDto()),null);
	}
	
	/**
	 * 获取当前资源下的用户权限
	 * 
	 * @param dto
	 * @return
	 */
	public Map<String, Boolean> getValidation(RegPeopleDto dto) {
		String contextPath = getRequest().getContextPath();
		Map<String, Boolean> validURIMaps = ValidationUtil.validModuleOperator(contextPath, "/register/regPeople", dto);
		return validURIMaps;
	}
	
	/**
	 * 按ID查询数据
	 * 
	 * @param dto
	 * @return
	 */
	@RequestMapping(value="/findOne",method={RequestMethod.GET})
	@ApiOperation(value = "按ID查询数据", notes = "按ID查询数据",httpMethod="GET")
	@ApiImplicitParams({
		@ApiImplicitParam(name = "fdId", value = "数据ID", paramType = "query", required = false, dataType = "String")
	})
	public Response findOne(String fdId){
		return SuccessResponseData.newInstance(regPeopleService.findOne(fdId));
	}
	/**
	 * 查看已删除数据
	 */
	@RequestMapping(value="/findTwo",method={RequestMethod.GET})
	@ApiOperation(value="查看已删除数据",notes="查看已删除数据",httpMethod="GET")
	@ApiImplicitParams({
		@ApiImplicitParam(name="isDelete",value="状态",paramType="query",required=false,dataType="String")
	})
	public Response findTwo(int isDelete){
		return SuccessResponseData.newInstance(regPeopleService.findTwo(isDelete));
	}
	/**
	 * 新增数据
	 * 
	 * @param dto
	 * @return
	 */
	//@RequestMapping(value="/save",method={RequestMethod.POST})
	@ApiOperation(value = "新增数据", notes = "新增数据",httpMethod="POST")
	public Response save(@RequestBody RegPeopleDto dto){
		return SuccessResponseData.newInstance(regPeopleService.save(dto));
	}
	
	/**
	 * 修改数据
	 * 
	 * @param dto
	 * @return
	 */
	//@RequestMapping(value="/update",method={RequestMethod.POST})
	@ApiOperation(value = "修改数据", notes = "修改数据",httpMethod="POST")
	public Response update(@RequestBody RegPeopleDto dto){
		return SuccessResponseData.newInstance(regPeopleService.update(dto));
	}
	
	/**
	 * 删除数据，可批量
	 * 
	 * @param ids  格式：1;2;3;4....
	 * @return
	 */
	@RequestMapping(value="/delete",method={RequestMethod.GET})
	@ApiOperation(value = "删除数据", notes = "删除数据",httpMethod="GET")
		@ApiImplicitParams({
		@ApiImplicitParam(name = "ids", value = "数据集,格式：1;2;3;4....", paramType = "query", required = false, dataType = "String")
	})
	public Response delete(String ids){
		Boolean isOk = regPeopleService.deleteByIds(ids);
		return SuccessResponse.newInstance(isOk?"删除成功！":"删除失败！");
	}
	
	/**
	 * 分页查询
	 * 
	 * @param pageDto
	 * @return
	 */
	@RequestMapping(value="/findByPage",method={RequestMethod.POST})
	@ApiOperation(value = "分页查询数据", notes = "分页查询数据。需传参数:<br>companyId；<br>isTops=0；<br>pertype（1:社招管理人员;2:校招管培生;3:校招大专生;4:岗位工）",httpMethod="POST")
	public Response findByPage(@RequestBody RegPeopleDto dto,PageVO pageVo){
		return SuccessResponseData.newInstance(regPeopleService.findByPage(dto,pageVo));
	}
	
	/**
	 * 刷身份证
	 * 
	 * @param dto
	 * @return
	 */
	@RequestMapping(value="/shuKa",method={RequestMethod.POST})
	@ApiOperation(value = "刷身份证", notes = "刷身份证。参数<br>companyId:公司Id<br>pertype:人员类型（1:社招管理人员;2:校招管培生;3:校招大专生;4:岗位工）<br>name:姓名<br>sex:性别<br>nation:民族<br>nid:身份证号码<br>birthdate:出生日期<br>address:住址",httpMethod="POST")
	public Response shuKa(@RequestBody RegPeopleDto dto){
		return SuccessResponseData.newInstance(regPeopleService.shuKa(dto));
	}
	
}
